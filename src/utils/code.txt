use of asyncronous
console.log("starting")
setTimeout(()=>{
    console.log("2 sec timeout")
},2000)
setTimeout(()=>
{
    console.log("0 Timmer")
})
console.log("stopping")

using json parse w/0 json npm package
const data = JSON.parse(responce.body)

geocode method
// const geocodeurl = 'https://api.mapbox.com/geocoding/v5/mapbox.places/alwar.json?access_token=pk.eyJ1IjoiYW5pc2hnIiwiYSI6ImNrcGQ4azNibzA2aDcyd252ZjV2amx6Y2wifQ.uHQ5ngD631ZYllDnib1gpw&limit=1'
// request({url: geacodeurl,json:true},(error,responce)=>{
//     if(error)
//     console.log("Mapp app cant be loaded!")
// else if(responce.body.features==null)
// console.log("Unalble to find searched place!")
//     else
//     console.log("Longitude and Lattitude of "+responce.body.features[0].text+" are "+responce.body.features[0].center[0]+","+responce.body.features[0].center[1])
// })

general callback method
const fo1 = (a,b,callback)=>{
   const url = ''
   request({url:url,json:true},(error,response)=>{
      if(error){
          callback(er,da)

      }else if(){

      }else

   })
}
calling method: 
forecast(-78, 44.1545, (error, data) => {
   console.log('Error', error)
   console.log('Data', data)
 })

 date time methodlet unix_timestamp = 1549312452
// Create a new JavaScript Date object based on the timestamp
// multiplied by 1000 so that the argument is in milliseconds, not seconds.
var date = new Date(unix_timestamp * 1000);
// Hours part from the timestamp
var hours = date.getHours();
// Minutes part from the timestamp
var minutes = "0" + date.getMinutes();
// Seconds part from the timestamp
var seconds = "0" + date.getSeconds();

// Will display time in 10:30:23 format
var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);